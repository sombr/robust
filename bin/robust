#!/usr/bin/env plackup
# vim: ft=perl
package psgi::robust;
use strict;
use warnings;

use feature "state";

use lib 'lib';

use Plack::Builder;
use Plack::Request;

use JSON -convert_blessed_universally;
use File::Slurp qw/ read_file /;

use Robust::Schema;
use Robust::Schema::Group;
use Robust::Schema::Student;
use Robust::Schema::Attendance;

my $json = JSON->new->convert_blessed(1);

sub data {
    state $data //= $json->decode(read_file("data/data.json"));
};

builder {
    enable "Plack::Middleware::AccessLog::Timed", format => '%{X_FORWARDED_FOR}i %h %l %u %t "%r" %>s %b "%{Referer}i" "%{User-agent}i"';
    mount "/"      => sub {
        my $index //= read_file("template/app.html");

        [ 200, [], [ $index ] ];
    },
    map {
        my $name = $_;
        mount "/js/$name" => sub {
            my $index //= read_file("js/$name");

            [ 200, [], [ $index ] ];
        }
    } map { $_ =~ s{^.*?/([^/]+js)$}{$1}; $_ } glob("js/*.js"),
    mount "/js/all" => sub {
        my $all = qx{uglifyjs js/* -b};
        [ 200, [], [ $all ] ];
    },
    mount "/classes" => sub {
        my $req = Plack::Request->new(shift);
        use Data::Dumper;
        warn Dumper( $req->parameters );

        return [ 200, [], [
            $json->encode(
                [
                    Robust::Schema::Group->all
                ]
            )
        ] ];
    },
    mount "/session" => sub {
        return [ 200, [], [ $json->encode(
            {
                name => "Andrew1",
                rsid => 123
            }
        ) ] ];
    }
};
